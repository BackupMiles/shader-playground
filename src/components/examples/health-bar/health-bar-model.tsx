/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { GroupProps, useLoader } from "@react-three/fiber";
import { Mesh, Object3D } from "three";
import { GLTFLoader } from "three/examples/jsm/Addons.js";
import { THealthUniform } from "./uniforms";

function isMeshType(object?: Object3D): object is Mesh {
  return object?.type === 'Mesh'
}

type THealthUniformProps = {
  gltfPath: string
  fragmentShader: string
  vertexShader: string
  uniforms: THealthUniform
}

export const HealthBarModel = ({ fragmentShader, gltfPath, vertexShader, uniforms, ...props }: THealthUniformProps & GroupProps) => {
  const { nodes, materials } = useLoader(GLTFLoader, gltfPath);

  return (
      isMeshType(nodes.Cube_1) && isMeshType(nodes.Cube_2) && (
        <group {...props} dispose={null}>
          <mesh castShadow receiveShadow geometry={nodes.Cube_1.geometry} material={materials.Base} />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube_2.geometry}
          >
            <shaderMaterial fragmentShader={fragmentShader} vertexShader={vertexShader} uniforms={uniforms} />
          </mesh>
        </group>
      )
  );
}