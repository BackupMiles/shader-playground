/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from '@react-three/drei'
import { GroupProps } from '@react-three/fiber'
import { DoubleSide } from 'three'
import { TCustomModel } from '../../types/custom-model'
import { isMeshType } from '../../utils/mesh'
import grassFragmentShader from './grass/fragment.glsl?raw'
import vertexShader from './grass/vertex.glsl?raw'
import { TGrassUniforms } from './uniforms'

type TGrassBladeProps = GroupProps & TCustomModel<TGrassUniforms>

export const GrassBlade = (props: TGrassBladeProps) => {
  const { nodes } = useGLTF('grass_blade.glb')
  if (isMeshType(nodes.Plane)) {
    nodes.Plane.geometry.scale(0.4, 0.4, 0.4);
  }

  return isMeshType(nodes.Plane) && (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={nodes.Plane.material}
      >
        <shaderMaterial side={DoubleSide} fragmentShader={grassFragmentShader} uniforms={props.uniforms} vertexShader={vertexShader} />
      </mesh>
    </group>
  )
}

useGLTF.preload('grass_blade.glb')